"""
--------------------------------------- CYK Algorithm --------------------------------------
Author: Saloni 
Purpose: To check if a given string can be generated using a given Context-Free Grammar
-------------------------------------------------------------------------------------------
"""

# ---- Step 1: Input Grammar ----
num_rules = int(input("Enter number of grammar rules: "))
grammar = []

print("Enter grammar rules (Format: S -> AB or A -> a):")
for _ in range(num_rules):
    lhs, rhs = input().split(" -> ")
    grammar.append([lhs.strip(), rhs.strip()])

# ---- Step 2: Function to check if grammar is valid CNF ----
def check_grammar(grammar):
    variables = {}
    for rule in grammar:
        left, right = rule

        # Left side must be a single uppercase letter
        if len(left) != 1 or not left.isupper():
            return False

        # Right side must be either two uppercase or one lowercase
        if len(right) == 1 and not right.islower():
            return False
        elif len(right) == 2 and (not right[0].isupper() or not right[1].isupper()):
            return False
        elif len(right) == 0 or len(right) > 2:
            return False

        variables[left] = "defined"

        # Keep track of right-side variables
        for symbol in right:
            if symbol.isupper() and symbol not in variables:
                variables[symbol] = "undefined"

    # All used variables must be defined somewhere
    return all(v == "defined" for v in variables.values())

# ---- Step 3: CYK Algorithm (Recursive) ----
def cyk(string, computed=None, grammar=grammar):
    if computed is None:
        computed = {}

    if string in computed:
        return computed

    # Base Case: Single character
    if len(string) == 1:
        computed[string] = ""
        for lhs, rhs in grammar:
            if rhs == string:
                computed[string] += lhs
        computed[string] = "".join(sorted(set(computed[string])))
        return computed

    # Recursive Case: Split string in two parts
    computed[string] = ""
    for i in range(1, len(string)):
        part1 = string[:i]
        part2 = string[i:]
        left_vars = cyk(part1, computed)[part1]
        right_vars = cyk(part2, computed)[part2]

        # Combine possible pairs
        for v1 in left_vars:
            for v2 in right_vars:
                for lhs, rhs in grammar:
                    if rhs == v1 + v2 and lhs not in computed[string]:
                        computed[string] += lhs

    computed[string] = "".join(sorted(set(computed[string])))
    return computed

# ---- Step 4: Print CYK Table and Result ----
def print_cyk(string, grammar):
    result = cyk(string, {}, grammar)
    if result.get(string, "") and 'S' in result[string]:
        print("\n The string can be generated by the grammar (ACCEPTED)")
        print("\n--- CYK Table ---")
        for i in range(1, len(string) + 1):
            for j in range(len(string) - i + 1):
                sub = string[j:j + i]
                symbols = result.get(sub, "[]")
                print(f"{sub} : {symbols}", end=" | ")
            print()
    else:
        print("\n The string CANNOT be generated by the grammar (REJECTED)")

# ---- Step 5: Main Execution ----
input_string = input("\nEnter the string to check: ").strip()

if check_grammar(grammar):
    print_cyk(input_string, grammar)
else:
    print(" Invalid Grammar! Please enter grammar in CNF (A -> a or A -> BC).")

